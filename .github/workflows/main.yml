
name: test actions 1
on:
  push:
    branches: [ main ]
jobs:
  build:
    name: generate new images
    runs-on: ubuntu-latest

#    container:
#      image: imagemagik:latest
#      volumes:
#        - ${{ github.workspace }}:/tmp


    steps:

#      - uses: actions/checkout@main
#      - uses: actions/checkout@v2
      - uses: actions/checkout@v3
        with:
          path: 'docs/'

      - name: Check files before
        run: ls -lart docs

#      - run: sudo apt update ; sudo apt-get install -y -qq libvips ghostscript imagemagick
      - run: sudo apt-get install -y -qq libvips ghostscript imagemagick

#      - run: convert -version

      - name: Run script (/w tty workaround)
        shell: 'script -q -e -c "bash {0}"'
        run: source runme.sh

      - name: Check files after
        run: ls -lart docs

##      - name: commit docs changes
##        env:
##          CI_COMMIT_MESSAGE: Continuous Integration Build Artifacts
##          CI_COMMIT_AUTHOR: Continuous Integration
##          CI_COMMIT_EMAIL: crapalajuive@gmail.com
##        run: |
##            git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
##            git config --global user.email "${{ env.CI_COMMIT_EMAIL }}"
##
##            git add docs
##            git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
##            git push

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          author_name: github actions
          author_email: crapalajuive@gmail.com
          message: 'adding docs'
          add: '. --force'
          cwd: 'docs/'

#      - name: commit docs changes
#        run: |
#          git config --global user.name "github actions"
#          git config --global user.email "crapalajuive@gmail.com"
#          git add docs/
#          git commit --amend --no-edit
#          git push origin main --force

#          git push origin master:deploy --force

#       - name: Run a multi-line script
#         shell: 'script -q -e -c "bash {0}"'
#         run: |
#           perl -E 'say "Is STDOUT a TTY?: ", -t STDOUT ? "yes" : "no"'
#
# where shell: 'script -q -e -c "bash {0}"' is the trick.

#        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)

#            git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
#            git config --global user.email "username@users.noreply.github.com"
#            git config --global user.email "crapalajuive@gmail.com"
